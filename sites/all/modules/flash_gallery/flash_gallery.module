<?php
// $Id: flash_gallery.module,v 1.1.4.1 2009/08/19 01:50:56 danieltome Exp $

/**
 * @file
 * Uses Adobe Flash Simpleviewer to display taxonomy images as a gallery
 */


function flash_gallery_theme() {
  return array(
    'flash_gallery' => array(
      'file' => 'flash_gallery.module',
      'arguments' => array(
        'galleries' => NULL,
        'tid' => NULL,
      ),
    ),
  );
}

/**
 * Implementation of hook_help().
 */
function flash_gallery_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      return t('Allows displaying image galleries with Flash animation');
  }
}

/**
 * Implementation of hook_perm().
 */
function flash_gallery_perm() {
  return array('administer flash gallery');
}

/**
 * Implementation of hook_menu().
 */
function flash_gallery_menu() {
  $items = array();
  $items['fgallery'] = array(
    'page callback' => 'flash_gallery_render',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['fgallery_xml'] = array(
    'page callback' => 'flash_gallery_xml',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/content/fgallery'] = array(
    'title' => 'Flash Galleries',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flash_gallery_admin_form', NULL),
    'access arguments' => array('administer flash gallery'),
  );
  return $items;
}

/**
 * Renders the Flash Gallery based on the Term ID from the
 * second argument: fgallery/TID
 *
 * @param $tid
 *  The taxonomy term id
 * @return
 *  Output to theme flash_gallery
 */
function flash_gallery_render($tid = 0) {
  $tid = (int) $tid;
  $output = '';
  if (module_exists('image') && module_exists('image_gallery')) {
    $galleries = taxonomy_get_tree(_image_gallery_get_vid(), $tid, -1, 1);
    for ($i=0; $i < count($galleries); $i++) {
      $galleries[$i]->count = taxonomy_term_count_nodes($galleries[$i]->tid, 'image');
      $tree = taxonomy_get_tree(_image_gallery_get_vid(), $galleries[$i]->tid, -1);
      $descendant_tids = array_merge(array($galleries[$i]->tid), array_map('_taxonomy_get_tid_from_term', $tree));
      $placeholders = implode(', ', array_fill(0, $descendant_tids, '%d'));
      $last = db_fetch_object(db_query_range(db_rewrite_sql('SELECT n.nid FROM {node} n INNER JOIN {term_node} tn ON n.nid = tn.nid WHERE tn.tid IN ('. $placeholders .') AND n.status = 1 ORDER BY n.sticky DESC, n.created DESC'), 0, 1));
      $galleries[$i]->latest = node_load(array('nid' => $last->nid));
    }
    if ($tid) {
      $gallery = taxonomy_get_term($tid);
      $parents = taxonomy_get_parents($tid);
      foreach ($parents as $parent) {
        $breadcrumb[] = array('path' => 'fgallery/'. $parent->tid, 'title' => $parent->name);
      }
      $breadcrumb[] = array('path' => 'fgallery/', 'title' => t('Image galleries'));
      $breadcrumb = array_reverse($breadcrumb);
      drupal_set_title($gallery->name);
    }
    $breadcrumb[] = array('path' => $_GET['q']);
    drupal_set_breadcrumb($breadcrumb);
    $output .= theme('flash_gallery', $galleries, $tid);
  }
  else {
    drupal_set_message(t('Both image module and image_gallery module should be enabled to use flash galleries.'), 'error');
  }
return $output;
}

function theme_flash_gallery($galleries, $tid) {

  // We'll add height to keep thumbnails lined up.
  // Call to image.module depends on image.module version.
  if (function_exists('_image_get_sizes')) {
    $size = _image_get_sizes('thumbnail');
  }
  else {
    $size = _image_get_dimensions('thumbnail');
  }

  $width = $size['width'];
  $height = $size['height'];

  $content = '';
  if (count($galleries)) {
    $content .= '<ul class="galleries">';
    foreach ($galleries as $gallery) {
      $content .= '<li style="height : '. $height .'px">';
      if ($gallery->count)
        $content .= l(image_display($gallery->latest, 'thumbnail'), 'fgallery/'. $gallery->tid, array('html' => TRUE));
      $content .= "<h3>". l($gallery->name, 'fgallery/'. $gallery->tid) ."</h3>\n";
      $content .= '<div class="description">'. check_markup($gallery->description) ."</div>\n";
      $content .= '<p class="count">'. format_plural($gallery->count, 'There is 1 image in this gallery', 'There are @count images in this gallery') ."</p>\n";
      if ($gallery->latest->changed) {
        $content .= '<p class="last">'. t('Last updated: %date', array('%date' => format_date($gallery->latest->changed))) ."</p>\n";
      }
      $content .= "</li>\n";
    }
    $content .= "</ul>\n";
  }
  if ($tid && taxonomy_term_count_nodes($tid, 'image')) {
    $location = base_path() . drupal_get_path('module', 'flash_gallery');
    $content .= '<script type="text/javascript" src="'. $location .'/simpleviewer/swfobject.js"></script>';
    $content .= t('<div id="flashcontent">Adobe Flash is required. <a href="http://www.adobe.com/go/getflashplayer/">Download Adobe Flash.</a></div>');
    $content .= '<script type="text/javascript">'."\n";
    $op[] = $location .'/simpleviewer/viewer.swf';
    $op[] = 'viewer';
    $op[] = variable_get('flash_width', 700);
    $op[] = variable_get('flash_height', 600);
    // minimum Flash version required
    $op[] = 7;
    $op[] = '#'. variable_get('flash_background_color', '181818');
    $content .= 'var fo = new SWFObject("'. implode('", "', $op) .'");'."\n";
    if (variable_get('flash_transparent', 0)) {
      $content .= 'fo.addParam("wmode", "transparent");'."\n";
    }
    $content .= 'fo.addVariable("preloaderColor", "0x'. variable_get('flash_loader_color', 'ff0000') .'");'."\n";
    $content .= 'fo.addVariable("xmlDataPath", "'. url('fgallery_xml/'. $tid) .'");'."\n";
    $content .= 'fo.write("flashcontent");'."\n";
    $content .= '</script>';
  }
  if ($tid + count($galleries) == 0) {
    $content .= '<p class="count">'. format_plural(0, 'There is 1 image in this gallery', 'There are @count images in this gallery') ."</p>\n";
  }
  return $content;
}

function flash_gallery_xml($tid = 0) {
  $tid = (int) $tid;
  //print "tid = $tid";
  $xml = '<?xml version="1.0" encoding="UTF-8"?>'."\n";
  $xml = "<simpleviewerGallery ". flash_gallery_xml_options($tid) .">\n";
  $result = db_query(db_rewrite_sql("SELECT n.nid FROM {term_node} t INNER JOIN {node} n ON t.nid=n.nid WHERE n.status=1 AND n.type='image' AND t.tid=%d ORDER BY n.sticky DESC, n.created DESC"), $tid);
  while ($nid = db_fetch_array($result)) {
    $node = node_load($nid);
    $images = $node->images;
    if (flash_gallery_is_jpg(file_create_path($images['preview']))) {
      $xml .= '<image><filename>';
      $xml .= basename($images['preview']);
      $xml .= '</filename><caption><![CDATA[';
      if (variable_get('xml_display_title', 1)) {
        $caption[] = $node->title;
      }
      if (variable_get('xml_show_link', 0)) {
        $caption[] = '<u>'. l(t('download'), file_create_url($images['_original'])) .'</u>';
      }
      if ($caption) {
        $xml .= implode(' :: ', $caption);
        unset($caption);
      }
      $xml .= ']]></caption></image>'."\n";

    }
  }
  $xml .= '</simpleviewerGallery>';
  drupal_set_header('Content-type: text/xml');
  print $xml;
  exit;
}

function flash_gallery_xml_options($tid) {
  $gallery = taxonomy_get_term($tid);
  $op[] = 'maxImageWidth="'. variable_get('xml_max_width', 480) .'"';
  $op[] = 'maxImageHeight="'. variable_get('xml_max_height', 480) .'"';
  $op[] = 'textColor="0x'. variable_get('xml_text_color', 'ffffff') .'"';
  $op[] = 'frameColor="0x'. variable_get('xml_frame_color', 'ffffff') .'"';
  $op[] = 'frameWidth="'. variable_get('xml_frame_width', 20) .'"';
  $op[] = 'stagePadding="'. variable_get('xml_stage_padding', 40) .'"';
  $op[] = 'thumbnailColumns="'. variable_get('xml_thumb_columns', 4) .'"';
  $op[] = 'thumbnailRows="'. variable_get('xml_thumb_rows', 1) .'"';
  $op[] = 'navPosition="'. variable_get('xml_nav_position', 'top') .'"';
  $title = variable_get('xml_display_album', 1) ? $gallery->name : '';
  $op[] = 'title="'. $title .'"';
  $rc = variable_get('xml_right_click', 1) ? 'true' : 'false';
  $op[] = 'enableRightClickOpen="'. $rc .'"';
  //TODO: implement setting for background image
  $op[] = 'backgroundImagePath=""';
  $op[] = 'imagePath="'. flash_gallery_image_url() .'/"';
  $op[] = 'thumbPath="'. flash_gallery_image_url() .'/"';
  return implode(' ', $op);
}

function flash_gallery_admin_form() {
  flash_gallery_check_dirs();
  $form['dimensions'] = array(
    '#type' => 'fieldset',
    '#title' => t('dimensions'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('All dimensions should be given in pixels.'),
  );
  $form['dimensions']['flash_width'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('flash_width', 700),
    '#size' => 5,
    '#maxlength' => 5,
    '#title' => t('width of flash animation'),
    '#required' => TRUE,
  );
  $form['dimensions']['flash_height'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('flash_height', 600),
    '#size' => 5,
    '#maxlength' => 5,
    '#title' => t('height of flash animation'),
    '#required' => TRUE,
  );
  $form['dimensions']['xml_max_width'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('xml_max_width', 480),
    '#size' => 5,
    '#maxlength' => 5,
    '#title' => t('width of your largest image in pixels'),
    '#required' => TRUE,
    '#description' => t('Used to determine the best layout for your gallery.'),
  );
  $form['dimensions']['xml_max_height'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('xml_max_height', 480),
    '#size' => 5,
    '#maxlength' => 5,
    '#title' => t('height of your largest image in pixels'),
    '#required' => TRUE,
    '#description' => t('Used to determine the best layout for your gallery.'),
  );
  $form['dimensions']['xml_frame_width'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('xml_frame_width', 20),
    '#size' => 5,
    '#maxlength' => 5,
    '#title' => t('width of image frame in pixels'),
    '#required' => TRUE,
  );
  $form['dimensions']['xml_stage_padding'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('xml_stage_padding', 40),
    '#size' => 5,
    '#maxlength' => 5,
    '#title' => t('stage padding'),
    '#description' => t('Distance between image and thumbnails and around gallery edge in pixels.'),
    '#required' => TRUE,
  );
  $form['colors'] = array(
    '#type' => 'fieldset',
    '#title' => t('colors'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('All colors should be given as hexadecimal rgb-values.'),
  );
  $form['colors']['flash_background_color'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('flash_background_color', '181818'),
    '#size' => 6,
    '#maxlength' => 6,
    '#title' => t('background color'),
    '#description' => t('Background color of flash animation.'),
    '#required' => TRUE,
  );
  $form['colors']['flash_transparent'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('flash_transparent', 0),
    '#title' => t('tranparency'),
    '#description' => t('Checking this box will make your background transparent. This setting overrides the background color setting.'),
  );
  $form['colors']['flash_loader_color'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('flash_loader_color', 'ff0000'),
    '#size' => 6,
    '#maxlength' => 6,
    '#title' => t('flash loader color'),
    '#description' => t('Color of part of flash animation that says "loading xml data", while loading your gallery.'),
    '#required' => TRUE,
  );
  $form['colors']['xml_text_color'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('xml_text_color', 'ffffff'),
    '#size' => 6,
    '#maxlength' => 6,
    '#title' => t('text color'),
    '#description' => t('Color of title and caption text.'),
    '#required' => TRUE,
  );
  $form['colors']['xml_frame_color'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('xml_frame_color', 'ffffff'),
    '#size' => 6,
    '#maxlength' => 6,
    '#title' => t('frame color'),
    '#description' => t('Color of image frame, navigation buttons (on top and hover buttons) and thumbnail frame.'),
    '#required' => TRUE,
  );
  $form['navigation'] = array(
    '#type' => 'fieldset',
    '#title' => t('navigation'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $options_1 = drupal_map_assoc(array(0, 1, 2, 3, 4, 5));
  $options_2 = drupal_map_assoc(array('top', 'bottom', 'left', 'right'));
  $form['navigation']['xml_nav_position'] = array(
    '#type' => 'select',
    '#options' => $options_2,
    '#default_value' => variable_get('xml_nav_position', 'top'),
    '#title' => t('navigation position'),
    '#description' => t('Position of thumbnails relative to image.'),
  );
  $form['navigation']['xml_thumb_columns'] = array(
    '#type' => 'select',
    '#options' => $options_1,
    '#default_value' => variable_get('xml_thumb_columns', 4),
    '#title' => t('thumbnail columns'),
    '#description' => t('Number of thumbnail columns. To disable thumbnails completely set this value to 0'),
  );
  $form['navigation']['xml_thumb_rows'] = array(
    '#type' => 'select',
    '#options' => $options_1,
    '#default_value' => variable_get('xml_thumb_rows', 1),
    '#title' => t('thumbnail rows'),
    '#description' => t('Number of thumbnail rows. To disable thumbnails completely set this value to 0.'),
  );
  $form['miscellaneous'] = array(
    '#type' => 'fieldset',
    '#title' => t('miscellaneous'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['miscellaneous']['xml_display_title'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('xml_display_title', 1),
    '#title' => t('display title'),
    '#description' => t('Whether to display the node title in the flash animation.'),
  );
  $form['miscellaneous']['xml_display_album'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('xml_display_album', 1),
    '#title' => t('display album name'),
    '#description' => t('Whether to display the album name in the flash animation.'),
  );
  $form['miscellaneous']['xml_show_link'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('xml_show_link', 0),
    '#title' => t('display download link'),
    '#description' => t('Apart from the node title, also display a clickable link to allow downloading the originally uploaded image.'),
  );
  $form['miscellaneous']['xml_rebuild_thumbs'] = array(
    '#type' => 'checkbox',
    '#default_value' => 0,
    '#title' => t('build thumbnail library'),
    '#description' => t('Normally, you should do this only once, after installing the module. This builds a library of thumbnails based on pre-existing images which reside inside pre-exising galleries. You do not have to repeat this later on: images that are created after installing this module are handled automatically. '),
  );
  $form['#validate'][] = 'flash_gallery_admin_validate';

  return system_settings_form($form);
}

function flash_gallery_admin_validate($form, &$form_state) {
  if ($form_state['values']['xml_rebuild_thumbs']) {
    flash_gallery_rebuild_thumbs();
  }
}

function flash_gallery_rebuild_thumbs() {
  flash_gallery_check_dirs();
  $tree = taxonomy_get_tree(_image_gallery_get_vid());
  $tids = array_map('_taxonomy_get_tid_from_term', $tree);
  $placeholders = implode(', ', $tids);
  $result = db_query(db_rewrite_sql("SELECT n.nid FROM {term_node} t INNER JOIN {node} n ON t.nid = n.nid WHERE n.status = 1 AND n.type='image' AND t.tid IN ($placeholders)"));
  while ($nid = db_fetch_array($result)) {
    $node = node_load($nid);
    $images = $node->images;
    if ($images['preview'] && flash_gallery_is_jpg(file_create_path($images['preview']))) {
      $preview_name = flash_gallery_image_path() .'/flash/thumbs/'. basename($images['preview']);
      $thumb = file_create_path($images['thumbnail']);
      if (!copy($thumb, $preview_name)) {
        $error = TRUE;
      }
    }
  }
  if ($error) {
    drupal_set_message(t('Not all thumbnails were successfully created'), 'error');
  }
  else {
    drupal_set_message(t('Thumbnail library was successfully created'));
  }
}

function flash_gallery_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  if ($node->type == 'image') {
    $images = $node->images;
    switch ($op) {
      case 'insert':
      case 'update':
        if ($images['preview']) {
          flash_gallery_check_dirs();
          if (flash_gallery_is_jpg(file_create_path($images['preview']))) {
            $preview_name = flash_gallery_image_path() .'/flash/thumbs/'. basename($images['preview']);
            $thumb = file_create_path($images['thumbnail']);
            copy($thumb, $preview_name);
          }
        }
        break;
      case 'delete':
        if ($images['preview']) {
          flash_gallery_check_dirs();
          if (flash_gallery_is_jpg(file_create_path($images['preview']))) {
            $preview_name = flash_gallery_image_path() .'/flash/thumbs/'. basename($images['preview']);
            unlink($preview_name);
          }
        }
        break;
    }
  }
}

function flash_gallery_is_jpg($path) {
  $info = image_get_info($path);
  if (strtolower($info['extension']) == 'jpg') {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

function flash_gallery_image_path() {
  return rtrim(file_create_path(variable_get('image_default_path', 'images')), '/');
}

function flash_gallery_image_url() {
  return rtrim(file_create_url(variable_get('image_default_path', 'images')), '/');
}

function flash_gallery_check_dirs() {
  $path = flash_gallery_image_path() .'/flash';
  $store_path = $path .'/thumbs';
  if (!file_check_directory($path, FILE_CREATE_DIRECTORY)) {
    return FALSE;
  }
  if (!file_check_directory($store_path, FILE_CREATE_DIRECTORY)) {
    return FALSE;
  }
  return TRUE;
}
